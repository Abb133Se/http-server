package server

import "strings"

// HandlerFunc defines the function signature for all HTTP route handlers.
//
// A handler receives a parsed HTTP request and returns a Response struct.
// It should not directly write to the network connection; instead, the server
// takes care of serializing and sending the Response.
//
// Example:
//
//	func helloHandler(req *Request) Response {
//	    return Response{
//	        Version: HTTPVersion,
//	        Status:  200,
//	        Reason:  "OK",
//	        Headers: map[string]string{"Content-Type": "text/plain"},
//	        Body:    "Hello, World!",
//	    }
//	}
type HandlerFunc func(req *Request) Response

// Router is a lightweight HTTP request router.
//
// It maintains a mapping between URL paths and their corresponding
// HandlerFunc implementations. The router is responsible for finding
// the correct handler for an incoming Request and returning its Response.
//
// Features:
//   - Exact path matching (e.g., "/").
//   - Prefix-based matching for "/echo/".
//   - Fallback to a 404 Not Found response if no handler matches.
//
// Example usage:
//
//	router := NewRouter()
//	resp := router.Route(&Request{Path: "/echo/hello"})
type Router struct {
	routes map[string]HandlerFunc
}

// NewRouter creates and initializes a Router with default routes.
//
// Predefined routes:
//   - "/" → handleRoot
//   - "/echo/" → handleEcho
//
// Returns:
//   - *Router: A pointer to a Router instance ready for use.
func NewRouter() *Router {
	r := &Router{routes: make(map[string]HandlerFunc)}

	r.Handle("/", handleRoot)
	r.Handle("/echo/", handleEcho)

	return r
}

// Handle registers a handler function for a given path.
//
// Parameters:
//   - path: The exact route path (e.g., "/about").
//   - handler: The function responsible for processing requests to this path.
//
// Notes:
//   - Paths must be unique; a later call with the same path overrides the handler.
func (r *Router) Handle(path string, handler HandlerFunc) {
	r.routes[path] = handler
}

// Route matches an HTTP request to the appropriate handler and returns a response.
//
// Behavior:
//   - If an exact path match is found in the routes map, its handler is executed.
//   - If the path starts with "/echo/", the echo handler is invoked.
//   - Otherwise, a default 404 Not Found response is returned.
//
// Parameters:
//   - req: The parsed HTTP request to route.
//
// Returns:
//   - Response: The HTTP response generated by the matched handler.
func (r *Router) Route(req *Request) Response {
	if handler, ok := r.routes[req.Path]; ok {
		return handler(req)
	}

	if strings.HasPrefix(req.Path, "/echo/") {
		return r.routes["/echo/"](req)
	}

	return Response{
		Version: HTTPVersion,
		Status:  404,
		Reason:  "Not Found",
		Headers: map[string]string{"Content-Type": "text/plain"},
		Body:    "404 page not found",
	}
}
